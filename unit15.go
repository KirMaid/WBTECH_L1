/*
К каким негативным последствиям может привести данный фрагмент кода, и как это исправить? Приведите корректный пример реализации.

var justString string

func someFunc() {
  v := createHugeString(1 << 10)
  justString = v[:100]
}

func main() {
  someFunc()
}

Ответ:
Когда делается срез строки, фактически создаётся новая строка, которая ссылается на ту же область памяти, что и оригинальная строка.
Однако, если оригинальная строка становится недоступной (например, если она была локальной переменной в функции, которая уже вернула управление), то новая строка может стать недействительной.
В нашем случае, функция createHugeString(1 << 10) создает очень большую строку, которая затем усекается до первых 100 символов.
Однако, если оригинальная строка становится недоступной после вызова someFunc(), то justString может стать недействительной.

Чтобы исправить эту проблему, можно скопировать подстроку в новую строку, что гарантирует, что justString будет действительной независимо от оригинальной строки.

func someFunc() {
	v := createHugeString(1 << 10)
	justString = string(v[:100])
}
*/

package main
