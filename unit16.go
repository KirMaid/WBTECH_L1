/*Реализовать быструю сортировку массива (quicksort) встроенными методами языка.*/
package main

import (
	"fmt"
	_ "math/rand"
	_ "time"
)

/*
Алгоритм быстрой сортировки работает следующим образом:
1.Выбирается "опорный" элемент из массива. В данном коде опорный элемент выбирается как последний элемент массива.
2.Массив разбивается на две части: элементы, меньшие опорного, и элементы, большие опорного. Это делается функцией partition.
3.Процесс сортировки повторяется рекурсивно для каждой из двух частей.
*/

/*
Функция partition работает следующим образом:
1.Переменная i указывает на позицию, на которой будут располагаться элементы, меньшие опорного.
2.Цикл for проходит по всем элементам массива, начиная с первого и заканчивая предпоследним. Если текущий элемент меньше или равен опорному, он меняет местами с элементом на позиции i, а затем увеличивает i.
3.После завершения цикла опорный элемент меняет местами с элементом на позиции i. Теперь все элементы, меньшие опорного, находятся слева от i, а все элементы, большие опорного, - справа.
4.Функция возвращает массив и позицию i как индекс опорного элемента.
*/
func partition(arr []int, low, high int) ([]int, int) {
	pivot := arr[high]
	i := low
	for j := low; j < high; j++ {
		if arr[j] <= pivot {
			arr[i], arr[j] = arr[j], arr[i]
			i++
		}
	}
	arr[i], arr[high] = arr[high], arr[i]
	return arr, i
}

// Указываем обязательно первый и последний элементы в массиве для сортировки
func quickSort(arr []int, low, high int) []int {
	if low < high {
		var pi int
		arr, pi = partition(arr, low, high)
		arr = quickSort(arr, low, pi-1)
		arr = quickSort(arr, pi+1, high)
	}
	return arr
}

func main() {
	arr := []int{10, 80, 30, 90, 40, 50, 70}
	fmt.Println("Изначальный массив: ", arr)
	quickSort(arr, 0, len(arr)-1)
	fmt.Println("Отсортированный массив: ", arr)
}
