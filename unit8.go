/*Дана переменная int64. Разработать программу которая устанавливает i-й бит в 1 или 0. */
package main

import "fmt"

/*
1 << pos: Сдвигает 1 на позицию pos влево. Результатом является число, в котором установлен только бит на позиции pos.
n |= 1 << pos: Использует оператор |= для установки бита на позиции pos в числе n.
Оператор | выполняет побитовое ИЛИ между числами, и если хотя бы один из битов равен 1, то результат равен 1.
*/
func setBit(n int64, pos uint) int64 {
	n |= 1 << pos
	return n
}

/*
1 << pos: Сдвигает 1 на позицию pos влево. Результатом является число, в котором установлен только бит на позиции pos.
n &^= 1 << pos: Использует оператор &^= для очистки бита на позиции pos в числе n. Оператор &^ выполняет побитовое И, а затем инвертирует результат.
*/
func clearBit(n int64, pos uint) int64 {
	n &^= 1 << pos
	return n
}

func main() {
	var num int64 = 10 // 1010 в двоичном формате
	fmt.Printf("Оригинальное число: %064b\n", num)

	// Установить 2-й бит в 1
	num = setBit(num, 3)
	fmt.Printf("После установки единицы в четвёртый разряд: %064b\n", num)

	// Сбросить 2-й бит в 0
	num = clearBit(num, 3)
	fmt.Printf("После установки нуля в четвёртый разряд: %064b\n", num)
}
